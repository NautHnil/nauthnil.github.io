(function(a) {
  var c = function(e, C) {
    var j = a.extend({}, a.fn.nivoSlider.defaults, C),
      A = {
        currentSlide: 0,
        currentImage: "",
        totalSlides: 0,
        running: !1,
        paused: !1,
        stop: !1,
        controlNavEl: !1
      },
      i = a(e);
    i.data("nivo:vars", A).addClass("nivoSlider");
    var h = i.children();
    h.each(function() {
      var p = a(this),
        m = "";
      p.is("img") || (p.is("a") && (p.addClass("nivo-imageLink"), m = p), p = p.find("img:first"));
      var n = 0 === n ? p.attr("width") : p.width(),
        l = 0 === l ? p.attr("height") : p.height();
      "" !== m && m.css("display", "none");
      p.css("display", "none");
      A.totalSlides++
    });
    j.randomStart && (j.startSlide = Math.floor(Math.random() * A.totalSlides));
    0 < j.startSlide && (j.startSlide >= A.totalSlides && (j.startSlide = A.totalSlides - 1), A.currentSlide = j.startSlide);
    a(h[A.currentSlide]).is("img") ? A.currentImage = a(h[A.currentSlide]) : A.currentImage = a(h[A.currentSlide]).find("img:first");
    a(h[A.currentSlide]).is("a") && a(h[A.currentSlide]).css("display", "block");
    var d = a("<img/>").addClass("nivo-main-image");
    d.attr("src", A.currentImage.attr("src")).show();
    d.attr("alt", A.currentImage.attr("alt")).show();
    i.append(d);
    a(window).resize(function() {
      i.children("img").width(i.width());
      d.attr("src", A.currentImage.attr("src"));
      d.attr("alt", A.currentImage.attr("alt"));
      d.stop().height("auto");
      a(".nivo-slice").remove();
      a(".nivo-box").remove()
    });
    i.append(a('<div class="nivo-caption"></div>'));
    var B = function(m) {
      var g = a(".nivo-caption", i);
      if ("" != A.currentImage.attr("title") && void 0 != A.currentImage.attr("title")) {
        var l = A.currentImage.attr("title");
        "#" == l.substr(0, 1) && (l = a(l).html());
        "block" == g.css("display") ? setTimeout(function() {
          g.html(l)
        }, m.animSpeed) : (g.html(l), g.stop().fadeIn(m.animSpeed))
      } else {
        g.stop().fadeOut(m.animSpeed)
      }
    };
    B(j);
    var f = 0;
    !j.manualAdvance && 1 < h.length && (f = setInterval(function() {
      b(i, h, j, !1)
    }, j.pauseTime));
    j.directionNav && (i.append('<div class="nivo-directionNav"><a class="nivo-prevNav">' + j.prevText + '</a><a class="nivo-nextNav">' + j.nextText + "</a></div>"), a(i).on("click", "a.nivo-prevNav", function() {
      if (A.running) {
        return !1
      }
      clearInterval(f);
      f = "";
      A.currentSlide -= 2;
      b(i, h, j, "prev")
    }), a(i).on("click", "a.nivo-nextNav", function() {
      if (A.running) {
        return !1
      }
      clearInterval(f);
      f = "";
      b(i, h, j, "next")
    }));
    if (j.controlNav) {
      A.controlNavEl = a('<div class="nivo-controlNav"></div>');
      i.after(A.controlNavEl);
      for (var G = 0; G < h.length; G++) {
        if (j.controlNavThumbs) {
          A.controlNavEl.addClass("nivo-thumbs-enabled");
          var E = h.eq(G);
          E.is("img") || (E = E.find("img:first"));
          E.attr("data-thumb") && A.controlNavEl.append('<a class="nivo-control" rel="' + G + '"><img src="' + E.attr("data-thumb") + '" alt="" /></a>')
        } else {
          A.controlNavEl.append('<a class="nivo-control" rel="' + G + '">' + (G + 1) + "</a>")
        }
      }
      a("a:eq(" + A.currentSlide + ")", A.controlNavEl).addClass("active");
      a("a", A.controlNavEl).bind("click", function() {
        if (A.running || a(this).hasClass("active")) {
          return !1
        }
        clearInterval(f);
        f = "";
        d.attr("src", A.currentImage.attr("src"));
        d.attr("alt", A.currentImage.attr("alt"));
        A.currentSlide = a(this).attr("rel") - 1;
        b(i, h, j, "control")
      })
    }
    j.pauseOnHover && i.hover(function() {
      A.paused = !0;
      clearInterval(f);
      f = ""
    }, function() {
      A.paused = !1;
      "" !== f || j.manualAdvance || (f = setInterval(function() {
        b(i, h, j, !1)
      }, j.pauseTime))
    });
    i.bind("nivo:animFinished", function() {
      d.attr("src", A.currentImage.attr("src"));
      d.attr("alt", A.currentImage.attr("alt"));
      A.running = !1;
      a(h).each(function() {
        a(this).is("a") && a(this).css("display", "none")
      });
      a(h[A.currentSlide]).is("a") && a(h[A.currentSlide]).css("display", "block");
      "" !== f || A.paused || j.manualAdvance || (f = setInterval(function() {
        b(i, h, j, !1)
      }, j.pauseTime));
      j.afterChange.call(this)
    });
    var F = function(q, n, p) {
        a(p.currentImage).parent().is("a") && a(p.currentImage).parent().css("display", "block");
        a('img[src="' + p.currentImage.attr("src") + '" alt="' + p.currentImage.attr("alt") + '"]', q).not(".nivo-main-image,.nivo-control img").width(q.width()).css("visibility", "hidden").show();
        for (var g = a('img[src="' + p.currentImage.attr("src") + '" alt="' + p.currentImage.attr("alt") + '"]', q).not(".nivo-main-image,.nivo-control img").parent().is("a") ? a('img[src="' + p.currentImage.attr("src") + ' alt="' + p.currentImage.attr("alt") + '""]', q).not(".nivo-main-image,.nivo-control img").parent().height() : a('img[src="' + p.currentImage.attr("src") + ' alt="' + p.currentImage.attr("alt") + '""]', q).not(".nivo-main-image,.nivo-control img").height(), m = 0; m < n.slices; m++) {
          var l = Math.round(q.width() / n.slices);
          m === n.slices - 1 ? q.append(a('<div class="nivo-slice" name="' + m + '"><img src="' + p.currentImage.attr("src") + '" alt="' + p.currentImage.attr("alt") + '" style="position:absolute; width:' + q.width() + "px; height:auto; display:block !important; top:0; left:-" + (l + m * l - l) + 'px;" /></div>').css({
            left: l * m + "px",
            width: q.width() - l * m + "px",
            height: g + "px",
            opacity: "0",
            overflow: "hidden"
          })) : q.append(a('<div class="nivo-slice" name="' + m + '"><img src="' + p.currentImage.attr("src") + '" alt="' + p.currentImage.attr("alt") + '" style="position:absolute; width:' + q.width() + "px; height:auto; display:block !important; top:0; left:-" + (l + m * l - l) + 'px;" /></div>').css({
            left: l * m + "px",
            width: l + "px",
            height: g + "px",
            opacity: "0",
            overflow: "hidden"
          }))
        }
        a(".nivo-slice", q).height(g);
        d.stop().animate({
          height: a(p.currentImage).height()
        }, n.animSpeed)
      },
      o = function(r, p, q) {
        a(q.currentImage).parent().is("a") && a(q.currentImage).parent().css("display", "block");
        a('img[src="' + q.currentImage.attr("src") + '" alt="' + q.currentImage.attr("alt") + '"]', r).not(".nivo-main-image,.nivo-control img").width(r.width()).css("visibility", "hidden").show();
        for (var g = Math.round(r.width() / p.boxCols), n = Math.round(a('img[src="' + q.currentImage.attr("src") + '" alt="' + q.currentImage.attr("alt") + '"]', r).not(".nivo-main-image,.nivo-control img").height() / p.boxRows), m = 0; m < p.boxRows; m++) {
          for (var l = 0; l < p.boxCols; l++) {
            l === p.boxCols - 1 ? r.append(a('<div class="nivo-box" name="' + l + '" rel="' + m + '"><img src="' + q.currentImage.attr("src") + '" alt="' + q.currentImage.attr("alt") + '" style="position:absolute; width:' + r.width() + "px; height:auto; display:block; top:-" + n * m + "px; left:-" + g * l + 'px;" /></div>').css({
              opacity: 0,
              left: g * l + "px",
              top: n * m + "px",
              width: r.width() - g * l + "px"
            })) : r.append(a('<div class="nivo-box" name="' + l + '" rel="' + m + '"><img src="' + q.currentImage.attr("src") + '" alt="' + q.currentImage.attr("alt") + '" style="position:absolute; width:' + r.width() + "px; height:auto; display:block; top:-" + n * m + "px; left:-" + g * l + 'px;" /></div>').css({
              opacity: 0,
              left: g * l + "px",
              top: n * m + "px",
              width: g + "px"
            })), a('.nivo-box[name="' + l + '"]', r).height(a('.nivo-box[name="' + l + '"] img', r).height() + "px")
          }
        }
        d.stop().animate({
          height: a(q.currentImage).height()
        }, p.animSpeed)
      },
      b = function(K, I, J, L) {
        var H = K.data("nivo:vars");
        H && H.currentSlide === H.totalSlides - 1 && J.lastSlide.call(this);
        if ((!H || H.stop) && !L) {
          return !1
        }
        J.beforeChange.call(this);
        L ? ("prev" === L && d.attr("src", H.currentImage.attr("src")), "next" === L && d.attr("src", H.currentImage.attr("src"))) : d.attr("src", H.currentImage.attr("src"));
        H.currentSlide++;
        H.currentSlide === H.totalSlides && (H.currentSlide = 0, J.slideshowEnd.call(this));
        0 > H.currentSlide && (H.currentSlide = H.totalSlides - 1);
        a(I[H.currentSlide]).is("img") ? H.currentImage = a(I[H.currentSlide]) : H.currentImage = a(I[H.currentSlide]).find("img:first");
        J.controlNav && (a("a", H.controlNavEl).removeClass("active"), a("a:eq(" + H.currentSlide + ")", H.controlNavEl).addClass("active"));
        B(J);
        a(".nivo-slice", K).remove();
        a(".nivo-box", K).remove();
        var y = J.effect;
        I = "";
        "random" === J.effect && (I = "sliceDownRight sliceDownLeft sliceUpRight sliceUpLeft sliceUpDown sliceUpDownLeft fold fade boxRandom boxRain boxRainReverse boxRainGrow boxRainGrowReverse".split(" "), y = I[Math.floor(Math.random() * (I.length + 1))], void 0 === y && (y = "fade")); - 1 !== J.effect.indexOf(",") && (I = J.effect.split(","), y = I[Math.floor(Math.random() * I.length)], void 0 === y && (y = "fade"));
        H.currentImage.attr("data-transition") && (y = H.currentImage.attr("data-transition"));
        H.running = !0;
        var x = 0,
          z = 0,
          w = I = "",
          v = "";
        I = "";
        if ("sliceDown" === y || "sliceDownRight" === y || "sliceDownLeft" === y) {
          F(K, J, H), z = x = 0, I = a(".nivo-slice", K), "sliceDownLeft" === y && (I = a(".nivo-slice", K)._reverse()), I.each(function() {
            var g = a(this);
            g.css({
              top: "0px"
            });
            z === J.slices - 1 ? setTimeout(function() {
              g.animate({
                opacity: "1.0"
              }, J.animSpeed, "", function() {
                K.trigger("nivo:animFinished")
              })
            }, 100 + x) : setTimeout(function() {
              g.animate({
                opacity: "1.0"
              }, J.animSpeed)
            }, 100 + x);
            x += 50;
            z++
          })
        } else {
          if ("sliceUp" === y || "sliceUpRight" === y || "sliceUpLeft" === y) {
            F(K, J, H), z = x = 0, I = a(".nivo-slice", K), "sliceUpLeft" === y && (I = a(".nivo-slice", K)._reverse()), I.each(function() {
              var g = a(this);
              g.css({
                bottom: "0px"
              });
              z === J.slices - 1 ? setTimeout(function() {
                g.animate({
                  opacity: "1.0"
                }, J.animSpeed, "", function() {
                  K.trigger("nivo:animFinished")
                })
              }, 100 + x) : setTimeout(function() {
                g.animate({
                  opacity: "1.0"
                }, J.animSpeed)
              }, 100 + x);
              x += 50;
              z++
            })
          } else {
            if ("sliceUpDown" === y || "sliceUpDownRight" === y || "sliceUpDownLeft" === y) {
              F(K, J, H);
              var u = z = x = 0;
              I = a(".nivo-slice", K);
              "sliceUpDownLeft" === y && (I = a(".nivo-slice", K)._reverse());
              I.each(function() {
                var g = a(this);
                0 === z ? (g.css("top", "0px"), z++) : (g.css("bottom", "0px"), z = 0);
                u === J.slices - 1 ? setTimeout(function() {
                  g.animate({
                    opacity: "1.0"
                  }, J.animSpeed, "", function() {
                    K.trigger("nivo:animFinished")
                  })
                }, 100 + x) : setTimeout(function() {
                  g.animate({
                    opacity: "1.0"
                  }, J.animSpeed)
                }, 100 + x);
                x += 50;
                u++
              })
            } else {
              if ("fold" === y) {
                F(K, J, H), z = x = 0, a(".nivo-slice", K).each(function() {
                  var g = a(this),
                    l = g.width();
                  g.css({
                    top: "0px",
                    width: "0px"
                  });
                  z === J.slices - 1 ? setTimeout(function() {
                    g.animate({
                      width: l,
                      opacity: "1.0"
                    }, J.animSpeed, "", function() {
                      K.trigger("nivo:animFinished")
                    })
                  }, 100 + x) : setTimeout(function() {
                    g.animate({
                      width: l,
                      opacity: "1.0"
                    }, J.animSpeed)
                  }, 100 + x);
                  x += 50;
                  z++
                })
              } else {
                if ("fade" === y) {
                  F(K, J, H), w = a(".nivo-slice:first", K), w.css({
                    width: K.width() + "px"
                  }), w.animate({
                    opacity: "1.0"
                  }, 2 * J.animSpeed, "", function() {
                    K.trigger("nivo:animFinished")
                  })
                } else {
                  if ("slideInRight" === y) {
                    F(K, J, H), w = a(".nivo-slice:first", K), w.css({
                      width: "0px",
                      opacity: "1"
                    }), w.animate({
                      width: K.width() + "px"
                    }, 2 * J.animSpeed, "", function() {
                      K.trigger("nivo:animFinished")
                    })
                  } else {
                    if ("slideInLeft" === y) {
                      F(K, J, H), w = a(".nivo-slice:first", K), w.css({
                        width: "0px",
                        opacity: "1",
                        left: "",
                        right: "0px"
                      }), w.animate({
                        width: K.width() + "px"
                      }, 2 * J.animSpeed, "", function() {
                        w.css({
                          left: "0px",
                          right: ""
                        });
                        K.trigger("nivo:animFinished")
                      })
                    } else {
                      if ("boxRandom" === y) {
                        o(K, J, H), v = J.boxCols * J.boxRows, x = z = 0, I = D(a(".nivo-box", K)), I.each(function() {
                          var g = a(this);
                          z === v - 1 ? setTimeout(function() {
                            g.animate({
                              opacity: "1"
                            }, J.animSpeed, "", function() {
                              K.trigger("nivo:animFinished")
                            })
                          }, 100 + x) : setTimeout(function() {
                            g.animate({
                              opacity: "1"
                            }, J.animSpeed)
                          }, 100 + x);
                          x += 20;
                          z++
                        })
                      } else {
                        if ("boxRain" === y || "boxRainReverse" === y || "boxRainGrow" === y || "boxRainGrowReverse" === y) {
                          o(K, J, H);
                          var v = J.boxCols * J.boxRows,
                            t = x = z = 0,
                            q = 0,
                            M = [];
                          M[t] = [];
                          I = a(".nivo-box", K);
                          if ("boxRainReverse" === y || "boxRainGrowReverse" === y) {
                            I = a(".nivo-box", K)._reverse()
                          }
                          I.each(function() {
                            M[t][q] = a(this);
                            q++;
                            q === J.boxCols && (t++, q = 0, M[t] = [])
                          });
                          for (H = 0; H < 2 * J.boxCols; H++) {
                            I = H;
                            for (L = 0; L < J.boxRows; L++) {
                              0 <= I && I < J.boxCols && (function(s, Q, P, O, N) {
                                var r = a(M[s][Q]),
                                  p = r.width(),
                                  R = r.height();
                                "boxRainGrow" !== y && "boxRainGrowReverse" !== y || r.width(0).height(0);
                                O === N - 1 ? setTimeout(function() {
                                  r.animate({
                                    opacity: "1",
                                    width: p,
                                    height: R
                                  }, J.animSpeed / 1.3, "", function() {
                                    K.trigger("nivo:animFinished")
                                  })
                                }, 100 + P) : setTimeout(function() {
                                  r.animate({
                                    opacity: "1",
                                    width: p,
                                    height: R
                                  }, J.animSpeed / 1.3)
                                }, 100 + P)
                              }(L, I, x, z, v), z++), I--
                            }
                            x += 100
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      D = function(m) {
        for (var l, p, n = m.length; n; l = parseInt(Math.random() * n, 10), p = m[--n], m[n] = m[l], m[l] = p) {}
        return m
      },
      k = function(g) {
        this.console && "undefined" !== typeof console.log && console.log(g)
      };
    this.stop = function() {
      a(e).data("nivo:vars").stop || (a(e).data("nivo:vars").stop = !0, k("Stop Slider"))
    };
    this.start = function() {
      a(e).data("nivo:vars").stop && (a(e).data("nivo:vars").stop = !1, k("Start Slider"))
    };
    j.afterLoad.call(this);
    return this
  };
  a.fn.nivoSlider = function(b) {
    return this.each(function(f, h) {
      var e = a(this);
      if (e.data("nivoslider")) {
        return e.data("nivoslider")
      }
      var d = new c(this, b);
      e.data("nivoslider", d)
    })
  };
  a.fn.nivoSlider.defaults = {
    effect: "random",
    slices: 15,
    boxCols: 8,
    boxRows: 4,
    animSpeed: 500,
    pauseTime: 3000,
    startSlide: 0,
    directionNav: !0,
    controlNav: !0,
    controlNavThumbs: !1,
    pauseOnHover: !0,
    manualAdvance: !1,
    prevText: "Prev",
    nextText: "Next",
    randomStart: !1,
    beforeChange: function() {},
    afterChange: function() {},
    slideshowEnd: function() {},
    lastSlide: function() {},
    afterLoad: function() {}
  };
  a.fn._reverse = [].reverse
})(jQuery);